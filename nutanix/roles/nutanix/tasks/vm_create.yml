---
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: Marcelo Perazolo <mperazol@us.ibm.com>
#---

    - name: create VM
      uri:
        url: "{{ rest_url }}/vms"
        validate_certs: "{{ cluster.validate_certs }}"
        force_basic_auth: yes
        method: POST
        status_code: 201
        user: "{{ cluster.username }}"
        password: "{{ cluster.password }}"
        return_content: yes
        body: "{{ lookup('template', vm.body) | from_yaml }}"
        body_format: json
      register: create_vm_output
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        label: "{{ vm.name }}"

    - name: create VM output
      debug:
        var: create_vm_output
      when: do_verbose

    - name: create VM tasks
      uri:
        url: "{{ rest_url }}/tasks/{{ result.json.task_uuid }}"
        validate_certs: "{{ cluster.validate_certs }}"
        force_basic_auth: yes
        method: GET
        status_code: 200
        user: "{{ cluster.username }}"
        password: "{{ cluster.password }}"
        return_content: yes
      register: create_vm_task_output
      until: create_vm_task_output.json.progress_status == "Succeeded"
      retries: 5
      delay: 10
      loop: "{{ create_vm_output.results }}"
      loop_control:
        loop_var: result
        label: "{{ result.json.task_uuid }}"

    - name: create VM tasks output
      debug:
        var: create_vm_task_output
      when: do_verbose

    - name: get VM
      uri:
        url: "{{ rest_url }}/vms/{{ result.json.entity_list[0].entity_id }}?include_vm_disk_config=true&include_vm_nic_config=true"
        validate_certs: "{{ cluster.validate_certs }}"
        force_basic_auth: yes
        method: GET
        status_code: 200
        user: "{{ cluster.username }}"
        password: "{{ cluster.password }}"
        return_content: yes
      register: get_vm_output
      loop: "{{ create_vm_task_output.results }}"
      loop_control:
        loop_var: result
        label: "{{ result.json.entity_list[0].entity_id }}"

    - name: get VM output
      debug:
        var: get_vm_output
      when: do_verbose

    - name: record VM results
      set_fact:
        vm_out: "{{ vm_out | default({}) | combine({ result.json.name: { 'uuid': result.json.uuid, 'address': result.json.vm_nics[0].requested_ip_address } }) }}"
      loop: "{{ get_vm_output.results }}"
      loop_control:
        loop_var: result
        label: "{{ result.json.name }}"

    - name: save VM
      set_fact:
        my_vms: "{{ my_vms | default({}) | combine({ vm.name: { 'type': vm.type, 'uuid': vm_out[vm.name].uuid, 'address': vm_out[vm.name].address, 'bin': vm.bin | default('/usr/bin/python'), 'user': vm.user | default('root') } }) }}"
      loop: "{{ vms }}"
      loop_control:
        loop_var: vm
        label: "{{ vm.name }}"

    - name: save VM output
      debug:
        var: my_vms
      when: do_debug

    - name: persist VM information
      copy:
        content: "{{ my_vms | to_nice_json }}"
        dest: "cluster-vms.json"
